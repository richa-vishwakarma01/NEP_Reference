version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1.arm64
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - metadata
  broker:
    image: confluentinc/cp-kafka:7.3.1.arm64
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - metadata
  core-service:
    container_name: core-service
    hostname: core-service
    build:
      context: https://${GITHUB_TOKEN}@github.com/nepworldwide/mb-platform-public.git#master:metadata/
      dockerfile: ./core-service/Dockerfile
    image: core-service:latest
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://broker:29092
      - DATASOURCES_DEFAULT_URL=jdbc:postgresql://postgres/metadata
      - TRACING_JAEGER_SENDER_AGENT_HOST=jaeger
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
      interval: 40s
      timeout: 20s
      retries: 6
    networks:
     - metadata
  xfl-integration:
    build: https://${GITHUB_TOKEN}@github.com/nepworldwide/mb-platform-public.git#master:metadata/xfl-integration
    container_name: xfl-integration
    hostname: xfl-integration
    image: xfl-integration:latest
    ports:
      - "8103:8103"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://broker:29092
      - DATASOURCES_DEFAULT_URL=jdbc:postgresql://postgres/metadata
      - DATASOURCES_DEFAULT_USERNAME=${DATASOURCES_USERNAME}
      - DATASOURCES_DEFAULT_PASSWORD=${DATASOURCES_PASSWORD}
      - TRACING_JAEGER_SENDER_AGENT_HOST=jaeger@
      - username= ${USERNAME}
      - password= ${PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
      interval: 40s
      timeout: 20s
      retries: 6
    networks:
      - metadata
  tags-integration:
    build: https://${GITHUB_TOKEN}@github.com/nepworldwide/mb-platform-public.git#master:metadata/tags-integration
    platform: linux/x86_64
    container_name: tags-integration
    hostname: tags-integration
    image: tags-integration:latest
    ports:
      - "7800:7800"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=PLAINTEXT://broker:29092
      - DATASOURCES_DEFAULT_URL=jdbc:postgresql://postgres/metadata
      - DATASOURCES_DEFAULT_USERNAME=${DATASOURCES_USERNAME}
      - DATASOURCES_DEFAULT_PASSWORD=${DATASOURCES_PASSWORD}
      - TRACING_JAEGER_SENDER_AGENT_HOST=jaeger@
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost/ || exit 1" ]
      interval: 40s
      timeout: 20s
      retries: 6
    networks:
      - metadata
  postgres:
    hostname: postgres
    container_name: postgres
    image: postgres:12
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=metadata
      - POSTGRES_USER=${DATASOURCES_USERNAME}
      - POSTGRES_PASSWORD=${DATASOURCES_PASSWORD}
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    networks:
      - metadata
    #command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
networks:
  metadata:
      driver: bridge
      name: metadata

volumes:
    postgresql:
    postgresql_data: